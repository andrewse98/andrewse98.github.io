{
  "hash": "abe720dc89b52f53aed26f7e00b0af83",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Unlocking Indonesia's Workforce: A Practical Guide to the BPS (Bureau of Statistics) API in R\"\ndate: 2025-07-08\ntoc: true\ntoc_float: true\nreading-time: true\ncategories: [Tutorial, R, API, BPS, Aging Workforce]\nimage: title.png\ndescription: \"A step-by-step guide to accessing and visualizing workforce data in Indonesia using the BPS API in R. Learn how to retrieve, parse, and visualize data on the aging workforce with practical examples.\"\nbibliography: references.bib\ncsl: apa.csl\n---\n\nGetting an accurate and up-to-date understanding of the workforce in Indonesia is crucial for researchers, policymakers, and the general public.\nThe Badan Pusat Statistik (BPS) Indonesia (Bureau of Statistics Indonesia) provides a wealth of data through its [API](https://webapi.bps.go.id/documentation/).\n\nThis guide will walk you through the process of accessing and visualizing workforce data in Indonesia using the BPS API in R.\nWe will focus on the \"Angkatan kerja menurut golongan umur\" (Workforce by Age Group) dataset for the year 2025, which is particularly relevant given the general trend of aging workforce worldwide [@worldeconomicforum2025].\n\n# Libraries\n\nFirst, let's load the necessary libraries to work with the BPS API and manipulate the data.\nWe will use `httr2` for making API requests and `tidyverse` for data manipulation and visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr2)\nlibrary(tidyverse)\n```\n:::\n\n\n# Using the BPS API\n\n## Getting the API Token\n\nThe BPS API provides access to various data sets from the Badan Pusat Statistik (BPS) Indonesia (Bureau of Statistics Indonesia).\n\nTo use the API, you need an API key, which you can obtain by registering on the [BPS website](https://webapi.bps.go.id/developer/). Log in to your BPS account, fill out your profile details, and create an application in the \"Applications\" tab @fig-applications. \n\nOnce you have created an application, you will see your API **token** in the \"App ID\" column. You can copy this token and set it as an environment variable. I recommend storing this key in the `.Renviron` file in your R project directory, so you can access it easily in your R scripts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\napi_key <- Sys.getenv(\"BPS_API_KEY\")\n```\n:::\n\n\n![Application tabs in the BPS Web API Profile](applications.png){#fig-applications fig-align=\"center\" width=\"400\"}\n\n## Making API Requests\n\nNext, we develop our API request. We start by specifying the base URL for the API which is: `https://webapi.bps.go.id/v1/api/list`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_url <- \"https://webapi.bps.go.id/v1/api/list\"\n```\n:::\n\n\nThe BPS API provides a variety of endpoints to access different data sets. The base URL is followed by specific parameters that define the data you want to retrieve. \n\nAccording to the [API documentation](https://webapi.bps.go.id/documentation/), to retrieve data you need to specify the following parameters: `model`, `domain`, `var`, and `th`. Unfortunately, the documentation does not provide a comprehensive list of available variables and its corresponding data set, so you will need to explore the API to find the data you want.\n\nOne way to specify the right API request is to find the data you want to retrieve using the BPS website, and inspect the API request template to that data by clicking on the JSON button @fig-json-endpoint. This will give you an idea of the structure of the data and the parameters you need for your API request.\n\n![Click on the JSON button](image1.png){#fig-json-endpoint fig-align=\"center\" width=\"700\"}\n\nIn our example, we want to access the [data](https://www.bps.go.id/id/statistics-table/2/Njk4IzI=/angkatan-kerja--ak--menurut-golongan-umur.html) for the \"Angkatan kerja menurut golongan umur\" (Workforce by Age Group) for the year 2025. Clicking on the JSON button, we can see the API endpoint that retrieves this data is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"https://webapi.bps.go.id/v1/api/list/model/data/lang/ind/domain/0000/var/698/th/125/key/[WebAPI_KEY]\"\n```\n:::\n\n\n::: callout-note\nThe `[WebAPI_KEY]` part of the URL is a placeholder for your actual API key.\nYou need to replace it with your own API key to make the request work.\n:::\n\nFrom this endpoint, we can modify our api request parameters using the `req_url_path_append()` function from the `httr2` package.\nThe parameters we will use are:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- \"data\" # model for \"Data\"\nlang <- \"ind\" # language for \"Bahasa Indonesia\"\ndomain <- \"0000\" # domain for \"Pusat\"\nvar <- \"698\" # variable for table \"Angkatan kerja menurut golongan umur\"\nth <- \"125\" # tahun 2025\n\napi_response <- request(base_url) |>\n  req_url_path_append(\n    \"model\", model,\n    \"lang\", lang,\n    \"domain\", domain,\n    \"var\", var,\n    \"th\", 125,\n    \"key\", api_key\n  ) |>\n  req_perform()\n```\n:::\n\n\nBelow is the response from the API request.\nThe response is in JSON format, which we can parse to extract the data we need using `resp_body_json()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\napi_response_list <- api_response |> resp_body_json()\nglimpse(api_response_list)\n```\n:::\n\n\n\n::: {.cell class='scroll'}\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 12\n $ status           : chr \"OK\"\n $ data-availability: chr \"available\"\n $ last_update      : chr \"2025-06-25 10:04:27\"\n $ subject          :List of 1\n  ..$ :List of 2\n  .. ..$ val  : int 520\n  .. ..$ label: chr \"Tenaga Kerja\"\n $ var              :List of 1\n  ..$ :List of 7\n  .. ..$ val    : int 698\n  .. ..$ label  : chr \"Angkatan Kerja (AK) Menurut Golongan Umur\"\n  .. ..$ unit   : chr \"\"\n  .. ..$ subj   : chr \"Tenaga Kerja\"\n  .. ..$ def    : chr \"\"\n  .. ..$ decimal: int 2\n  .. ..$ note   : chr \"<p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br \"| __truncated__\n $ turvar           :List of 4\n  ..$ :List of 2\n  .. ..$ val  : int 827\n  .. ..$ label: chr \"Bekerja\"\n  ..$ :List of 2\n  .. ..$ val  : int 828\n  .. ..$ label: chr \"Jumlah Pengangguran\"\n  ..$ :List of 2\n  .. ..$ val  : int 829\n  .. ..$ label: chr \"Jumlah AK\"\n  ..$ :List of 2\n  .. ..$ val  : int 830\n  .. ..$ label: chr \"% Bekerja / AK\"\n $ labelvervar      : chr \"Golongan Umur\"\n $ vervar           :List of 11\n  ..$ :List of 2\n  .. ..$ val  : int 1\n  .. ..$ label: chr \"15-19\"\n  ..$ :List of 2\n  .. ..$ val  : int 2\n  .. ..$ label: chr \"20-24\"\n  ..$ :List of 2\n  .. ..$ val  : int 3\n  .. ..$ label: chr \"25-29\"\n  ..$ :List of 2\n  .. ..$ val  : int 4\n  .. ..$ label: chr \"30-34\"\n  ..$ :List of 2\n  .. ..$ val  : int 5\n  .. ..$ label: chr \"35-39\"\n  ..$ :List of 2\n  .. ..$ val  : int 6\n  .. ..$ label: chr \"40-44\"\n  ..$ :List of 2\n  .. ..$ val  : int 7\n  .. ..$ label: chr \"45-49\"\n  ..$ :List of 2\n  .. ..$ val  : int 8\n  .. ..$ label: chr \"50-54\"\n  ..$ :List of 2\n  .. ..$ val  : int 9\n  .. ..$ label: chr \"55-59\"\n  ..$ :List of 2\n  .. ..$ val  : int 10\n  .. ..$ label: chr \"60+\"\n  ..$ :List of 2\n  .. ..$ val  : int 11\n  .. ..$ label: chr \"Total\"\n $ tahun            :List of 1\n  ..$ :List of 2\n  .. ..$ val  : int 125\n  .. ..$ label: chr \"2025\"\n $ turtahun         :List of 3\n  ..$ :List of 2\n  .. ..$ val  : int 189\n  .. ..$ label: chr \"Februari\"\n  ..$ :List of 2\n  .. ..$ val  : int 190\n  .. ..$ label: chr \"Agustus\"\n  ..$ :List of 2\n  .. ..$ val  : int 191\n  .. ..$ label: chr \"Tahunan\"\n $ datacontent      :List of 44\n  ..$ 7698827125189 : int 16164793\n  ..$ 2698828125189 : int 2527741\n  ..$ 4698828125189 : int 619800\n  ..$ 9698828125189 : int 262632\n  ..$ 7698829125189 : int 16450825\n  ..$ 3698828125189 : int 1319299\n  ..$ 4698830125189 : num 96.4\n  ..$ 6698828125189 : int 332935\n  ..$ 1698827125189 : int 4724711\n  ..$ 3698829125189 : int 17703447\n  ..$ 5698828125189 : int 351093\n  ..$ 11698830125189: num 95.2\n  ..$ 1698830125189 : num 82.2\n  ..$ 1698829125189 : int 5746898\n  ..$ 6698829125189 : int 17107389\n  ..$ 2698830125189 : num 84.4\n  ..$ 11698829125189: int 153049487\n  ..$ 1698828125189 : int 1022187\n  ..$ 8698829125189 : int 14323589\n  ..$ 11698827125189: int 145771180\n  ..$ 8698828125189 : int 242764\n  ..$ 5698827125189 : int 17177085\n  ..$ 2698829125189 : int 16224936\n  ..$ 11698828125189: int 7278307\n  ..$ 4698827125189 : int 16799939\n  ..$ 5698830125189 : int 98\n  ..$ 4698829125189 : int 17419739\n  ..$ 9698827125189 : int 11512218\n  ..$ 2698827125189 : int 13697195\n  ..$ 5698829125189 : int 17528178\n  ..$ 10698828125189: int 313824\n  ..$ 8698827125189 : int 14080825\n  ..$ 9698830125189 : num 97.8\n  ..$ 10698830125189: num 98.3\n  ..$ 7698830125189 : num 98.3\n  ..$ 7698828125189 : int 286032\n  ..$ 6698827125189 : int 16774454\n  ..$ 6698830125189 : num 98\n  ..$ 3698827125189 : int 16384148\n  ..$ 8698830125189 : num 98.3\n  ..$ 9698829125189 : int 11774850\n  ..$ 10698829125189: int 18769636\n  ..$ 10698827125189: int 18455812\n  ..$ 3698830125189 : num 92.5\n $ related          : list()\n```\n\n\n:::\n:::\n\n\n# Parsing the API Response\n\nThe API response contains several fields, including `vervar`, `var`, `turvar`, `tahun`, `turtahun`, and `datacontent`. When looking at the `datacontent` field, we can see that it contains a list of key-value pairs, where the keys are unique identifiers for each data point and the values are the actual data values. The keys appears to be a concatenation of several values, including `vervar`, `var`, `turvar`, `tahun`, and `turtahun`.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n$`7698827125189`\n[1] 16164793\n\n$`2698828125189`\n[1] 2527741\n\n$`4698828125189`\n[1] 619800\n\n$`9698828125189`\n[1] 262632\n\n$`7698829125189`\n[1] 16450825\n\n$`3698828125189`\n[1] 1319299\n```\n\n\n:::\n:::\n\n\n\nFor example, the key `7698827125189` can be broken down as follows:\n\n-   `vervar`: 7 -\\> \"45-49 tahun\"\n-   `var`: 698 -\\> \"Angkatan kerja menurut golongan umur\"\n-   `turvar`: 827 -\\> \"Bekerja\"\n-   `tahun`: 125 -\\> year \"2025\"\n-   `turtahun`: 189 --\\> month \"February\"\n\nTo help parse these keys, we can create a function that extracts these values based on their known positions and lengths.\nNote that the keys length may vary slightly between 13-14 characters as the `vervar` values can be of values 1-11, but the rest of the values are fixed in length.\nThus, we can use the `substr()` function to extract the values based on their positions by counting from right to left:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparse_key <- function(key) {\n  vervar_val <- substr(key, 1, nchar(key) - 12)\n  var_val <- substr(key, nchar(key) - 11, nchar(key) - 9)\n  turvar_val <- substr(key, nchar(key) - 8, nchar(key) - 6)\n  tahun_val <- substr(key, nchar(key) - 5, nchar(key) - 3)\n  turtahun_val <- substr(key, nchar(key) - 2, nchar(key))\n\n  return(\n    list(\n      vervar = vervar_val,\n      var = var_val,\n      turvar = turvar_val,\n      tahun = tahun_val,\n      turtahun = turtahun_val\n    )\n  )\n}\n```\n:::\n\n\nLet's try this function with example keys.\nAs we can see, the function correctly returns a list with the parsed values for each key:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkey_example <- c(\"7698827125189\", \"10698829125189\")\nparsed_key <- parse_key(key_example)\nparsed_key\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$vervar\n[1] \"7\"  \"10\"\n\n$var\n[1] \"698\" \"698\"\n\n$turvar\n[1] \"827\" \"829\"\n\n$tahun\n[1] \"125\" \"125\"\n\n$turtahun\n[1] \"189\" \"189\"\n```\n\n\n:::\n:::\n\n\n# Label the parsed values\n\nNote that each value in the key corresponds to a specific label.\nWe can create a named vector to map these values to their respective labels.\nFor starters, let's consider the `vervar` values, which represent age groups.\nThe `vervar` is a list which contains 11 sub lists, each containing a value and a label.\nFor example, the 15-19 age group has a value of 1 and a label of \"15-19\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\napi_response_list$vervar\n```\n:::\n\n\n\n::: {.cell class='scroll'}\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]]$val\n[1] 1\n\n[[1]]$label\n[1] \"15-19\"\n\n\n[[2]]\n[[2]]$val\n[1] 2\n\n[[2]]$label\n[1] \"20-24\"\n\n\n[[3]]\n[[3]]$val\n[1] 3\n\n[[3]]$label\n[1] \"25-29\"\n\n\n[[4]]\n[[4]]$val\n[1] 4\n\n[[4]]$label\n[1] \"30-34\"\n\n\n[[5]]\n[[5]]$val\n[1] 5\n\n[[5]]$label\n[1] \"35-39\"\n\n\n[[6]]\n[[6]]$val\n[1] 6\n\n[[6]]$label\n[1] \"40-44\"\n\n\n[[7]]\n[[7]]$val\n[1] 7\n\n[[7]]$label\n[1] \"45-49\"\n\n\n[[8]]\n[[8]]$val\n[1] 8\n\n[[8]]$label\n[1] \"50-54\"\n\n\n[[9]]\n[[9]]$val\n[1] 9\n\n[[9]]$label\n[1] \"55-59\"\n\n\n[[10]]\n[[10]]$val\n[1] 10\n\n[[10]]$label\n[1] \"60+\"\n\n\n[[11]]\n[[11]]$val\n[1] 11\n\n[[11]]$label\n[1] \"Total\"\n```\n\n\n:::\n:::\n\n\nWe can extract these values and labels from the API response and create a named vector for easy reference. We can use the `map_df()` and `pull()` function from the `purrr` package to iterate over the list and extract the values and labels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract age group label\nage_group <- api_response_list$vervar |>\n  map_dfr(\\(x) x) |>\n  pull(label, val)\n\n# Extract employment status label\nemployment_status <- api_response_list$turvar |>\n  map_dfr(\\(x) x) |>\n  pull(label, val)\n\n# Extract time category label\ntime_category <- api_response_list$turtahun |>\n  map_dfr(\\(x) x) |>\n  pull(label, val)\n\n# Extract year label\nyear <- api_response_list$tahun |>\n  map_df(\\(x) x) |>\n  pull(label, val)\n\n# Sample\nage_group\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      1       2       3       4       5       6       7       8       9      10 \n\"15-19\" \"20-24\" \"25-29\" \"30-34\" \"35-39\" \"40-44\" \"45-49\" \"50-54\" \"55-59\"   \"60+\" \n     11 \n\"Total\" \n```\n\n\n:::\n:::\n\n\nNext, we can extract the data content using `enframe()` to create a data frame with the values and their corresponding labels.\nThe `datacontent` field contains the actual data values, which we can convert into a data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatacontent <- api_response_list$datacontent |>\n  enframe(name = \"key\", value = \"value\")\n```\n:::\n\n\nWe can then join the parsed values with the labels to create a complete data frame with all the necessary information.\n\nWe will use `mutate()` to convert the `key` and `value` columns to character and double types, respectively, and then apply the `parse_key()` function to extract the parsed values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatacontent_labeled <- datacontent |>\n  mutate(\n    key = as.character(key),\n    value = as.double(value),\n    parsed_key = map(key, parse_key)\n  ) |>\n  unnest_wider(parsed_key) |>\n  select(-c(\"key\", \"var\")) |> # removed unused column\n  mutate(\n    vervar = age_group[vervar],\n    turvar = employment_status[turvar],\n    turtahun = time_category[turtahun],\n    tahun = year[tahun]\n  ) |>\n  rename(\n    age_group = vervar,\n    employment_status = turvar,\n    time_category = turtahun,\n    year = tahun\n  )\n```\n:::\n\n\nWe can see the result is a nice table with the parsed values and their corresponding labels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(datacontent_labeled)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n     value age_group employment_status   year  time_category\n     <dbl> <chr>     <chr>               <chr> <chr>        \n1 16164793 45-49     Bekerja             2025  Februari     \n2  2527741 20-24     Jumlah Pengangguran 2025  Februari     \n3   619800 30-34     Jumlah Pengangguran 2025  Februari     \n4   262632 55-59     Jumlah Pengangguran 2025  Februari     \n5 16450825 45-49     Jumlah AK           2025  Februari     \n6  1319299 25-29     Jumlah Pengangguran 2025  Februari     \n```\n\n\n:::\n:::\n\n\nWe can further clean this data by assigning factors to the age groups and employment status for better visualization, and then reorder the columns to have a more logical order.\n\nI decided to filter the \"% Bekerja / AK\" from the `employment_status` column as it shows percentage of the workforce that is employed, which is a different unit of measurement compared to the other columns that show counts of individuals in each age group.\nAdditionally, I filter the \"Total\" age group as it is not relevant for our analysis.\n\nFinally, we can select the relevant columns and ensure that the `age_group` column is ordered correctly for visualization purposes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatacontent_cleaned <- datacontent_labeled |>\n  filter(\n    !employment_status %in% c(\"Jumlah AK\", \"% Bekerja / AK\"),\n    age_group != \"Total\",\n  ) |>\n  mutate(\n    age_group = factor(age_group, levels = c(\n      \"15-19\", \"20-24\", \"25-29\", \"30-34\", \"35-39\",\n      \"40-44\", \"45-49\", \"50-54\", \"55-59\", \"60+\", \"Total\"\n    ), ordered = TRUE),\n    time_category = factor(time_category, levels = c(\n      \"Januari\", \"Februari\", \"Maret\", \"April\",\n      \"Mei\", \"Juni\", \"Juli\", \"Agustus\",\n      \"September\", \"Oktober\", \"November\", \"Desember\",\n      \"Tahunan\"\n    )),\n    employment_status = factor(employment_status, levels = c(\n      \"Bekerja\", \"Jumlah Pengangguran\", \"Jumlah AK\", \"% Bekerja / AK\"\n    ), labels = c(\n      \"Bekerja\" = \"Employed\",\n      \"Jumlah Pengangguran\" = \"Unemployed\",\n      \"Jumlah AK\" = \"Total Workforce\",\n      \"% Bekerja / AK\" = \"Percentage Employed\"\n    ), ordered = FALSE)\n  ) |>\n  select(\n    year, time_category, employment_status, age_group, value\n  ) |>\n  arrange(\n    year, time_category, employment_status, age_group\n  )\n```\n:::\n\n\nWe can now view the cleaned data frame to see the final result.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 5\n   year  time_category employment_status age_group    value\n   <chr> <fct>         <fct>             <ord>        <dbl>\n 1 2025  Februari      Employed          15-19      4724711\n 2 2025  Februari      Employed          20-24     13697195\n 3 2025  Februari      Employed          25-29     16384148\n 4 2025  Februari      Employed          30-34     16799939\n 5 2025  Februari      Employed          35-39     17177085\n 6 2025  Februari      Employed          40-44     16774454\n 7 2025  Februari      Employed          45-49     16164793\n 8 2025  Februari      Employed          50-54     14080825\n 9 2025  Februari      Employed          55-59     11512218\n10 2025  Februari      Employed          60+       18455812\n```\n\n\n:::\n:::\n\n\n# Visualizing the Data\n\nNow that we have the cleaned data, we can create an interactive plot to visualize the workforce by age group and employment status.\nWe will use `ggplot2` for the initial plot.\nWe use the `scales::comma()` function to format the y-axis labels with commas for better readability.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(datacontent_cleaned, aes(\n  x = age_group, y = value,\n  fill = employment_status\n)) +\n  geom_col(position = \"dodge\") +\n  facet_wrap(~time_category, scales = \"free_y\") +\n  labs(\n    title = \"Workforce by Age Group and Employment Status in Indonesia (2025)\",\n    x = \"Age Group\",\n    fill = \"Employment Status\"\n  ) +\n  scale_y_continuous(\n    \"Number of individuals\",\n    labels = scales::label_number(scale_cut = scales::cut_long_scale())\n  ) +\n  scale_fill_brewer(palette = \"Set2\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1)\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fig-workforce-plot-1.png){#fig-workforce-plot width=672}\n:::\n:::\n\n\nWhat is great about this @fig-workforce-plot[plot] is that it allows us to see the distribution of the workforce by age group and employment status across different months of the year.\n\n\n::: {.cell}\n\n:::\n\n\nInterestingly, we found that the workforce in the 60+ age group is quite significant, with a total of 18.455.812 individuals employed in February 2025. Considering the national pension age of 58 years in Indonesia, this indicates a substantial number of older individuals remaining in the workforce, which may point towards an aging workforce. However, a detailed comparison of the workforce data across different age groups and time points is needed to draw more conclusive insights.\n\n# Conclusion\n\nIn this tutorial, we have demonstrated how to access Indonesia workforce data through BPS API in R. The BPS API provides an easy way to retrieve and visualize data on the workforce in Indonesia, including the aging workforce. While the API documentation may not provide a comprehensive list of available variables, we can explore the BPS website to find the data we need and generate the corresponding API endpoints. Combined with the power of R, we can easily parse and visualize this data to gain insights into the workforce trends in Indonesia. This ease of access to data is crucial for researchers, policymakers, and the general public to understand the dynamics of the workforce in Indonesia, especially in the context of an aging population [@worldeconomicforum2025]. \n\n# Reference\n\n::: {#refs} :::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}