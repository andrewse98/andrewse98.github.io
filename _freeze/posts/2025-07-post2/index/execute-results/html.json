{
  "hash": "7a146c87119e340c0702f06c620592fd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Is Indonesia Workfore Aging?\"\ndate: 2023-07-09\ntoc: true\ntoc_float: true\nreading-time: true\ncategories: [Statistics]\ndescription: >\n  The workforce is aging in many countries, but does it apply to Indonesia? This post aim to discover just that.\ndraft: true\n---\n\nIn my previous [post](/posts/2025-07-post1/), I have shown how we can interact with the BPS API to get the latest data on Indonesia's workforce. Using this knowledge, we will now explore whether Indonesia does indeed have an aging workforce.\n\nOne way to demonstrate an aging workforce is to look for a widening gap between the number of workers in the 15-24 age group and the number of workers in the 60+ age group over time. If the gap is widening, it suggests that there are fewer young workers entering the workforce compared to older workers who are retiring. \n\nTo do so, we need to explore the BPS API data across years. I will examine Indonesia's workforce data between 2008-2025 because this is the earliest year for which the BPS API provides data, and 2025 is the latest year for which we have data.\n\n# Quick API extraction\n\nIn the previous post, I have shown how to extract data from the BPS API. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr2)\nlibrary(tidyverse)\n```\n:::\n\n\nWe use the same approach to extract the data we need. However, this time we will expand on the `th` (year) parameter to include all years from 2008 to 2025. The BPS API allows us to specify the year we want to retrieve data for, so we can loop through the years and collect the data for each year. \n\n\n::: {.cell}\n\n```{.r .cell-code}\napi_key <- Sys.getenv(\"BPS_API_KEY\")\nbase_url <- \"https://webapi.bps.go.id/v1/api/list\"\n\nmodel <- \"data\"\nlang <- \"ind\"\ndomain <- \"0000\"\nvar <- \"698\"\nth_years <- seq(108, 125) # Years from 2008 to 2025\n```\n:::\n\n\nWe create a custom function to make the API request for each year and return the data in a tidy format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_bps_request_for_year <- function(\n    year, base_url, api_key, model, lang, domain, var) {\n  request(base_url) |>\n    req_url_path_append(\n      \"model\", model,\n      \"lang\", lang,\n      \"domain\", domain,\n      \"var\", var,\n      \"th\", as.character(year), # Pass the current 'year' from the loop\n      \"key\", api_key\n    ) |>\n    req_perform()\n}\n```\n:::\n\n\nNow we can loop through the years and collect the data for each year. We will use `map_dfr` from the `purrr` package to iterate over the years and combine the results into a single data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\napi_responses_list <- purrr::map(th_years, function(year) {\n  message(paste(\"Fetching data for year:\", year))\n  make_bps_request_for_year(\n    year = year,\n    base_url = base_url,\n    api_key = api_key,\n    model = model,\n    lang = lang,\n    domain = domain,\n    var = var\n  )\n})\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFetching data for year: 108\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFetching data for year: 109\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFetching data for year: 110\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFetching data for year: 111\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFetching data for year: 112\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFetching data for year: 113\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFetching data for year: 114\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFetching data for year: 115\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFetching data for year: 116\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFetching data for year: 117\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFetching data for year: 118\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFetching data for year: 119\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFetching data for year: 120\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFetching data for year: 121\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFetching data for year: 122\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFetching data for year: 123\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFetching data for year: 124\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFetching data for year: 125\n```\n\n\n:::\n:::\n\n\nWe can see that the API responses are stored in a list. Each element of the list corresponds to a year and contains the data for that year.\n\nNext, we will extract the content from each API response. We define a custom function to extract the data from the API response. This function checks if the request was successful and then extracts the body of the response, which is expected to be in JSON format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextracted_data_list <- purrr::map(api_responses_list, function(response) {\n  if (httr2::resp_status(response) == 200) {\n    resp_body <- httr2::resp_body_json(response)\n    return(resp_body)\n  } else {\n    warning(paste(\n      \"Request failed for one year with status:\",\n      httr2::resp_status(response)\n    ))\n    return(NULL) # Return NULL or an error indicator for failed requests\n  }\n})\n```\n:::\n\n\nJust like before, we can use `map_dfr` to combine the extracted data into a single data frame. We need to extract the `datacontent` from the extracted data, which contains the actual data we are interested in.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbps_data <- purrr::map_dfr(extracted_data_list, function(data) {\n  if (!is.null(data)) {\n    datacontent <- data$datacontent\n    return(enframe(datacontent))\n  } else {\n    return(NULL) # Return NULL for failed requests\n  }\n})\n```\n:::\n\n\nNow we have a data frame `bps_data` that contains the workforce data for Indonesia from 2008 to 2025. The data frame has two columns: `name` and `value`. The `name` column contains the key which contains the relevant year and employment status data once parsed, and the `value` column contains the corresponding values.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  name           value    \n  <chr>          <list>   \n1 11698828108190 <int [1]>\n2 6698830108189  <dbl [1]>\n3 10698828108190 <int [1]>\n4 4698830108189  <dbl [1]>\n5 3698828108190  <int [1]>\n6 7698828108190  <int [1]>\n```\n\n\n:::\n:::\n\n\nWe can recall our `parse_key` function from the previous post to parse the `name` column into separate columns for year, employment status, and age group.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparse_key <- function(key) {\n  vervar_val <- substr(key, 1, nchar(key) - 12)\n  var_val <- substr(key, nchar(key) - 11, nchar(key) - 9)\n  turvar_val <- substr(key, nchar(key) - 8, nchar(key) - 6)\n  tahun_val <- substr(key, nchar(key) - 5, nchar(key) - 3)\n  turtahun_val <- substr(key, nchar(key) - 2, nchar(key))\n\n  return(\n    list(\n      vervar = vervar_val,\n      var = var_val,\n      turvar = turvar_val,\n      tahun = tahun_val,\n      turtahun = turtahun_val\n    )\n  )\n}\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbps_data_tidy <- bps_data |>\n  mutate(\n    value = as.double(value),\n    parsed_key = map(name, parse_key)\n  ) |>\n  unnest_wider(parsed_key) |>\n  select(-c(name, var)) |>\n  rename(\n    age_group = vervar,\n    value = value,\n    employment_status = turvar,\n    year = tahun,\n    month = turtahun\n  ) |>\n  select(\n    year, month, age_group, employment_status, value\n  )\n\nhead(bps_data_tidy)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  year  month age_group employment_status     value\n  <chr> <chr> <chr>     <chr>                 <dbl>\n1 108   190   11        828               9394515  \n2 108   189   6         830                    95.0\n3 108   190   10        828                 84600  \n4 108   189   4         830                    92.8\n5 108   190   3         828               1759409  \n6 108   190   7         828                196379  \n```\n\n\n:::\n:::\n\n\nNow, we have a tidy data frame `bps_data_tidy` that contains the workforce data for Indonesia from 2008 to 2025. Now, we can label the `age_group` and `employement_status` columns to make them more readable. Because we are looking at multiple dataset across years, there is a possibility that each of them have different labels. We will create a function that extracts the unique labels from the API responses for each parameters (e.g., `vervar`, `turvar`) and returns them as a named vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_unique_labels <- function(api_response_list, element_name) {\n  if (is.null(api_response_list) || length(api_response_list) == 0) {\n    message(\n      \"Input API response list is empty or NULL for element '\",\n      element_name, \"'. Returning NULL.\"\n    )\n    return(NULL)\n  }\n\n  # Remove any NULL responses (e.g., from failed API calls) before processing\n  clean_response_list <- purrr::compact(api_response_list)\n\n  if (length(clean_response_list) == 0) {\n    message(\n      \"No valid (non-NULL) API responses to process for element '\",\n      element_name, \"' after compacting. Returning NULL.\"\n    )\n    return(NULL)\n  }\n\n  all_labels_df <- clean_response_list |>\n    purrr::map_dfr(\\(x) {\n      target_element <- x[[element_name]]\n      if (is.null(target_element) || length(target_element) == 0) {\n        return(tibble(val = numeric(0), label = character(0)))\n      }\n\n      purrr::map_dfr(target_element, ~ tibble(\n        val = as.numeric(.x$val),\n        label = as.character(.x$label)\n      ))\n    })\n\n  # Final processing: unique rows, then pull\n  if (nrow(all_labels_df) == 0) {\n    message(paste(\n      \"No unique labels found for element:\",\n      element_name, \". Returning NULL.\"\n    ))\n    return(NULL)\n  }\n\n  unique_named_vector <- all_labels_df |>\n    dplyr::distinct(val, label) |> # Use distinct() for unique rows\n    dplyr::pull(label, name = val)\n\n  return(unique_named_vector)\n}\n```\n:::\n\n\nWe can now use this function to extract the unique labels for each of the parameters we are interested in: `vervar`, `turvar`, `turtahun`, and `tahun`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvervar_labels <- extract_unique_labels(extracted_data_list, \"vervar\")\nturvar_labels <- extract_unique_labels(extracted_data_list, \"turvar\")\nturtahun_labels <- extract_unique_labels(extracted_data_list, \"turtahun\")\ntahun_labels <- extract_unique_labels(extracted_data_list, \"tahun\")\n```\n:::\n\n\nNow, we can relabel the tidy data frame `bps_data_tidy` using the extracted labels. We will use the `recode` function from the `dplyr` package to relabel the `age_group` and `employement_status` columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbps_data_tidy_labeled <- bps_data_tidy |>\n  mutate(\n    age_group = recode(age_group, !!!vervar_labels),\n    employment_status = recode(employment_status, !!!turvar_labels),\n    year = recode(year, !!!tahun_labels),\n    month = recode(month, !!!turtahun_labels)\n  ) |>\n  mutate(\n    age_group = factor(age_group, levels = c(\n      \"15-19\", \"20-24\", \"25-29\", \"30-34\", \"35-39\",\n      \"40-44\", \"45-49\", \"50-54\", \"55-59\", \"60+\", \"Total\"\n    ), ordered = TRUE),\n    month = factor(month, levels = c(\n      \"Januari\", \"Februari\", \"Maret\", \"April\",\n      \"Mei\", \"Juni\", \"Juli\", \"Agustus\",\n      \"September\", \"Oktober\", \"November\", \"Desember\",\n      \"Tahunan\"\n    )),\n    employment_status = factor(employment_status, levels = c(\n      \"Bekerja\", \"Jumlah Pengangguran\", \"Jumlah AK\", \"% Bekerja / AK\"\n    )),\n  ) |>\n  select(year, month, employment_status, age_group, value) |>\n  arrange(year, month, employment_status, age_group)\n```\n:::\n\n\nAnd, here is a sample of the labeled data frame:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 5\n   year  month    employment_status age_group    value\n   <chr> <fct>    <fct>             <ord>        <dbl>\n 1 2008  Februari Bekerja           15-19      5734328\n 2 2008  Februari Bekerja           20-24     11332576\n 3 2008  Februari Bekerja           25-29     13351202\n 4 2008  Februari Bekerja           30-34     13566222\n 5 2008  Februari Bekerja           35-39     13146274\n 6 2008  Februari Bekerja           40-44     11998948\n 7 2008  Februari Bekerja           45-49     10484959\n 8 2008  Februari Bekerja           50-54      8238848\n 9 2008  Februari Bekerja           55-59      5804677\n10 2008  Februari Bekerja           60+        8391823\n```\n\n\n:::\n:::\n\n\n# Visualizing the data\n\nWe can now visualize the data to see if there is indeed an aging workforce in Indonesia. We will create a line plot that shows the number of workers in the 15-24 age group and the number of workers in the 60+ age group over time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbps_data_tidy_labeled |>\n  filter(\n    age_group %in% c(\"20-24\", \"55-59\", \"60+\"),\n    employment_status == \"Bekerja\",\n    month != \"Tahunan\"\n  ) |>\n  ggplot(aes(x = year, y = value, color = age_group, group = age_group)) +\n  facet_wrap(~month, scales = \"free_y\") +\n  geom_line(size = 1) +\n  geom_point(size = 2) +\n  scale_color_manual(values = c(\n    \"20-24\" = \"#E69F00\", # Muted orange\n    \"55-59\" = \"#56B4E9\", # Sky blue\n    \"60+\" = \"#009E73\" # Bluish green\n  )) +\n  labs(\n    title = \"Working Individuals in Indonesia by Age Group (2008-2025)\",\n    x = \"Year\",\n  ) +\n  scale_y_continuous(\n    \"Number of workers\",\n    labels = scales::label_number(scale_cut = scales::cut_long_scale())\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1)\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/bps-data-plot-1.png){width=672}\n:::\n:::\n\n\nThis plot shows the number of workers in the 20-24 age group and the 60+ age group over time. We can see that the number of workers in the 20-24 age group has been decreasing over time, while the number of workers in the 60+ age group has been increasing. This suggests that there is indeed an aging workforce in Indonesia.\n\nWe can further show this widening gap by centering all the values against 2008 numbers for each age group. This would further clarify whether there is a wdineing gap between the two age groups.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbps_data_tidy_labeled |>\n  filter(\n    age_group %in% c(\"20-24\", \"55-59\", \"60+\"),\n    employment_status == \"Bekerja\",\n    month != \"Tahunan\"\n  ) |>\n  group_by(age_group, month) |>\n  mutate(value = value - value[year == 2008]) |>\n  ungroup() |>\n  ggplot(aes(x = year, y = value, color = age_group, group = age_group)) +\n  facet_wrap(~month, scales = \"free_y\") +\n  geom_line(size = 1) +\n  geom_point(size = 2) +\n  scale_color_manual(values = c(\n    \"20-24\" = \"#E69F00\", # Muted orange\n    \"55-59\" = \"#56B4E9\", # Sky blue\n    \"60+\" = \"#009E73\" # Bluish green\n  )) +\n  labs(\n    title = \"Working Individuals in Indonesia by Age Group (2008-2025)\",\n    x = \"Year\",\n    y = \"Change in Number of Workers (compared to 2008)\",\n    color = \"Age Group\"\n  ) +\n  scale_y_continuous(\n    labels = scales::label_number(scale_cut = scales::cut_long_scale())\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1)\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/bps-data-plot-centered-1.png){width=672}\n:::\n:::\n\n\nThis plot shows the change in the number of workers in the 20-24 age group and the 60+ age group compared to 2008. We can see that the number of workers in the 20-24 age group has been decreasing over time, while the number of workers in the 60+ age group has been increasing. This further confirms that there is indeed an aging workforce in Indonesia.\n\nHow about the overall workforce, do we also see the same trend?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbps_data_tidy_labeled |>\n  filter(\n    age_group %in% c(\"20-24\", \"55-59\", \"60+\"),\n    employment_status == \"Jumlah AK\",\n    month != \"Tahunan\"\n  ) |>\n  group_by(age_group, month) |>\n  mutate(value = value - value[year == 2008]) |>\n  ungroup() |>\n  ggplot(aes(x = year, y = value, color = age_group, group = age_group)) +\n  facet_wrap(~month, scales = \"free_y\") +\n  geom_line(size = 1) +\n  geom_point(size = 2) +\n  scale_color_manual(values = c(\n    \"20-24\" = \"#E69F00\", # Muted orange\n    \"55-59\" = \"#56B4E9\", # Sky blue\n    \"60+\" = \"#009E73\" # Bluish green\n  )) +\n  labs(\n    title = \"Workforce in Indonesia by Age Group (2008-2025)\",\n    x = \"Year\",\n    y = \"Change in Number of Workers (compared to 2008)\",\n    color = \"Age Group\"\n  ) +\n  scale_y_continuous(\n    labels = scales::label_number(scale_cut = scales::cut_long_scale())\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1)\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/bps-data-plot-total-1.png){width=672}\n:::\n:::\n\n\nThis plot shows the change in the total number of workers in the 20-24 age group and the 60+ age group compared to 2008. We can see that the number of workers in the 20-24 age group has been decreasing over time, while the number of workers in the 60+ age group has been increasing. This further confirms that there is indeed an aging workforce in Indonesia.\n\nBut, how about the unemployed?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbps_data_tidy_labeled |>\n  filter(\n    age_group %in% c(\"20-24\", \"55-59\", \"60+\"),\n    employment_status == \"Jumlah Pengangguran\",\n    month != \"Tahunan\"\n  ) |>\n  group_by(age_group, month) |>\n  mutate(value = value - value[year == 2008]) |>\n  ungroup() |>\n  ggplot(aes(x = year, y = value, color = age_group, group = age_group)) +\n  facet_wrap(~month, scales = \"free_y\") +\n  geom_line(size = 1) +\n  geom_point(size = 2) +\n  scale_color_manual(values = c(\n    \"20-24\" = \"#E69F00\", # Muted orange\n    \"55-59\" = \"#56B4E9\", # Sky blue\n    \"60+\" = \"#009E73\" # Bluish green\n  )) +\n  labs(\n    title = \"Unemployment in Indonesia by Age Group (2008-2025)\",\n    x = \"Year\",\n    y = \"Change in Number of Unemployed (compared to 2008)\",\n    color = \"Age Group\"\n  ) +\n  scale_y_continuous(\n    labels = scales::label_number(scale_cut = scales::cut_long_scale())\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1)\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/bps-data-plot-unemployed-1.png){width=672}\n:::\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}